version: 2.1

parameters:
  # This parameter is used to trigger the main workflow
  trigger_pipeline:
    type: boolean
    default: true
  build_and_deploy_image:
    type: boolean
    default: false
  image_name:
    type: string
    default: speech_recognition_model_api
  package_version:
    type: string
    default: 1.0.0
  inference_host_name:
    type: string
    default: 34.70.114.226
  is_gpu_host:
    type: boolean
    default: false

executors:
  node:
    docker:
      - image: circleci/python:3.7

jobs:
  build_and_deploy_image:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/project/
    steps:
      - when:
          condition: << pipeline.parameters.build_and_deploy_image >>
          steps:
            - checkout:
                path: ~/project
            - run:
                name: build image
                command: |
                  echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
                  pip install google_compute_engine
                  gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
                  gcloud --quiet config set project ${GCP_PROJECT}
                  echo "Build ..."
                  docker build --rm=false -t us.gcr.io/${GCP_PROJECT}/<< pipeline.parameters.image_name >>:<< pipeline.parameters.package_version >> .
            - run:
                name: deploy image to registry
                command: |
                  echo "Deploy ..."
                  gcloud docker -- push us.gcr.io/${GCP_PROJECT}/<< pipeline.parameters.image_name >>
            - run:
                name: Remove account details
                command: |
                  rm ${HOME}/gcp-key.json ; ls
      - unless:
          condition: << pipeline.parameters.build_and_deploy_image >>
          steps:
            - run:
                name: image deployment not set to true
                command: |
                  echo 'New Image not built and deployed'

  start_server:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/project/
    steps:
      - checkout:
          path: ~/project
      - run:
          name: start server
          command: |
            echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
            pip install google_compute_engine
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GCP_PROJECT}

            echo "sudo gcloud docker -- pull us.gcr.io/${GCP_PROJECT}/<< pipeline.parameters.image_name >>:<< pipeline.parameters.package_version >>"  > start_server.sh

            echo 'sudo docker ps -q --filter "name=<< pipeline.parameters.image_name >>" | grep -q . && sudo docker stop "<< pipeline.parameters.image_name >>" && sudo docker rm -fv "<< pipeline.parameters.image_name >>"' >> start_server.sh

            if [ << pipeline.parameters.image_name >>:<< pipeline.parameters.is_gpu_host >> = true ]; then

            echo "sudo docker run --cpus=10 -m 20000m -itd -p 50051:50051 --name << pipeline.parameters.image_name >> -v /home/circleci/deployed_models:/opt/speech_recognition_open_api/deployed_models/ us.gcr.io/${GCP_PROJECT}/<< pipeline.parameters.image_name >>:<< pipeline.parameters.package_version >>" >> start_server.sh

            else

            echo "sudo docker run --ipc=host --shm-size 16G --gpus all --cpus=10 -m 20000m -itd -p 50051:50051 --name << pipeline.parameters.image_name >> -v /home/circleci/deployed_models:/opt/speech_recognition_open_api/deployed_models/ us.gcr.io/${GCP_PROJECT}/<< pipeline.parameters.image_name >>:<< pipeline.parameters.package_version >>" >> start_server.sh

            fi
            echo "Transfer via ssh ..."
            scp ./start_server.sh circleci@<< pipeline.parameters.inference_host_name >>:~/start_server.sh
            echo "Trigger via ssh ..."
            ssh -oStrictHostKeyChecking=no -v circleci@<< pipeline.parameters.inference_host_name >> 'sudo sh ~/start_server.sh'
      - run:
          name: Remove account details
          command: |
            rm ${HOME}/gcp-key.json ; ls

workflows:
  version: 2

  build_deploy_and_run_image:
    when: << pipeline.parameters.trigger_pipeline >>
    jobs:
      - build_and_deploy_image:
          name: build_and_deploy_image
          filters:
            branches:
              only: master
      - start_server:
          name: start_server
          filters:
            branches:
              only: master
          requires:
            - build_and_deploy_image
